\<template>		
	<div class="blackout"  @click="closeModalCourses" v-show="isShowModalCourses">		
		<div class="modal-courses" @click.stop="">
			<heading text = "Available courses" color="white"/>
			<div class="close-btn" @click="closeModalCourses"></div>
			<form action="/register/step-1" class="modal-form" submit="submit">
				<div id="step-1" v-show="step==1">
					<p class="text text-center">{{'Available courses label1' | translate }}</p>
					<p id="err-msg" class="err-text form__text-margin">{{ errorText  }}</p>
					<div class="course-container clearfix" v-for="course in allCoursesInfo">
						<label class="checkbox-container">
							<input type="checkbox" @change="chekboxChange(course.uuid)">
							<span class="checkmark"></span>
							<div class="modal__img"></div>
							<div class="course-card__info-title">
								{{ 'Course label' | translate }}:
							</div>		
							<div class="course-card__course-name">
								{{ "title"+course.uuid | translate}}
							</div>	
						</label>
						<router-link :to="{ name: 'course', params: { id: 1 }}" target="_blank" class="orange_btn modal-details-btn" @click="showCourseDetails(course.id)">
							{{ 'Detalis label' | translate }}
						</router-link>					  
						<select class="custom_select modal-select-position" @change(course.uuid, type=$event.targer.value)">
							<option class="custom_option">{{ 'not chosen' | translate}}
        	                                        <option class="custom_option" v-for="lform in learningForms" :value=> {{"learningform"+lform.uuid | translate}}
	                                        </select>
                	                        <select class="custom_select modal-select-position" :id="{{form + course.uuid}}">
							<option class="custom_option">{{ 'not chosen' | translate}}
                        	                        <option class="custom_option" v-for="ltype in learningTypes">{{"learningtype"+ltype.uuid | translate}}
                                	        </select>
					</div>
					<div class="orange_btn modal-main-btn" @click="showNextStep">{{"Next label" | translate }}</div>
				</div>
				<div id="step-2" v-show="step==2">
					<label class="text form__text-margin">{{ 'Reg form label' | translate}} </label>
					<p id="err-msg" class="err-text form__text-margin">{{ errorText  }}</p>
					<div class="contact-us__form-group">
						<label class="contact-us__label">{{ 'e-mail' | translate}}:</label>
						<input class="contact-us__input" v-model="email" type="text" id="email">
					</div>

                                        <div class="contact-us__form-group">
                                                <label class="contact-us__label">{{ 'first name' | translate}}:</label>
                                                <input class="contact-us__input" v-model="first_name" type="text" id="first_name">
                                        </div>

					<div class="contact-us__form-group">
                                                <label class="contact-us__label">{{ 'last name' | translate}}:</label>
                                                <input class="contact-us__input" v-model="last_name" type="text" id="last_name">
                                        </div>

					<div class="contact-us__form-group">
						<label class="contact-us__label">{{ 'Phone number' | translate}}:</label>
						<input class="contact-us__input" v-model="phone_num" type="text" id="phone_num">
					</div>
					<div class="contact-us__form-group">
						<label class="contact-us__label float-left">{{ 'Password label' | translate}}:</label>
						<input class="contact-us__input" v-model="password1" type="password" id="password1">
					</div>
					<div class="contact-us__form-group">
						<label class="contact-us__label float-left">{{ 'Confirm password label' | translate}}:</label>
						<input class="contact-us__input" v-model="password2" type="password" id="password2">
					</div>
					<div class="orange_btn modal-main-btn" @click="showLastStep">{{"Next label" | translate }}</div>
				</div>
				<div id="step-3" v-show="step==3">
							<label class="text form__text-margin">{{ 'Finish registration label' | translate}}</label>
							<div class="contact-us__form-group">
								<label class="contact-us__label">{{ 'Enter code label' | translate}}:</label>
								<input class="contact-us__input" v-model="code" type="text" id="code">
							</div>
					<div class="orange_btn modal-main-btn" @click="finish">{{"Join label" | translate }}</div>
				</div>
				<div class="white_btn modal-cancel-btn" @click="closeModalCourses">
					{{ 'Cancel label' | translate }}
				</div>

			</form>
			</div>	
		</div>	
</template>

<script>
import Vue from 'vue'
import heading from './heading.vue'
import axios from 'axios'


export default {
	components: {
		heading
	},
	data: function(){
  		return {
  			isShowModalCourses: false,
			step: 1,
			email: "",
			code: "",
			phone_num: "",
			password1: "",
			password2: "",
			first_name: "",
			last_name: "",
			courses: {},
			form: "",
			type: "",
			errorText: "",
  		}
  	},
  	methods: {
		chekboxChange(uuid, form="", type=""){
			formid = '#form' + uuid;
			form = document.querySelector(formid);
			console.log(form);
			if (courses.includes(uuid)){
				this.courses[uuid][active] = !this.courses[uuid][active];
				this.courses[uuid][type] = type;
				this.courses[uuid][form] = form;
			}
			else{
				this.courses[uuid][active] = true;
				this.courses[uuid][type] = type;
                                this.courses[uuid][form] = form;
			}
			console.log(this.courses);
		},
  		showModalCourses() {
			this.isShowModalCourses = true;	
			document.body.classList.add("lock");	       
		},
  		closeModalCourses(){
  			this.isShowModalCourses = false;
  			document.body.classList.remove("lock");
  			this.step = 1;
			this.email = "";
                        this.code = "";
                        this.phone_num = "";
                        this.password1 = "";
                        this.password2 =  "";
			this.first_name = "";
                        this.last_name = "";
  		},
  		showCourseDetails(id){
  			alert("i work")
  		},
		showNextStep() {
			if (Object.values(this.courses).includes(true)){
				++this.step;
			}
			else{
				document.getElementById("err-msg").style.display = "block";
				this.errorText = Vue.i18n.translate("error nothing was selected");
			}
		},
		showLastStep() {
			if (this.password1 != this.password2){
				document.getElementById("err-msg").style.display = "block";
                                this.errorText = Vue.i18n.translate("error passwords do not match");
			}
			else{
				axios.post('http://noostar.dp.ua/api/auth/code/', {'phone': this.phone_num})
 	             			.then((response) => {
                                	        console.log(response.data);
                				if (response.data.status=='Ok'){
							++this.step;
						}
						else{
							console.log(response.data.status);
						}
                		})
			}
		},
  		finish(){
                        let person = {
				"email": this.email, 
				"phone": this.phone_num, 
				"password": this.password1, 
				"first_name": { 
					//Vue.i18n.locale(): this.first_name 
				}, 
				"last_name": { 
					//Vue.i18n.locale(): this.last_name 
				} 
			}
			axios.post('http://noostar.dp.ua/api/auth/code/', {'phone': this.phone_num})
  		}
  	},
  	mounted(){
		Vue.i18n.set(Vue.i18n.locale());
  		this.$root.$on('modal-on', () => {
  			this.showModalCourses();  			
  		});
		document.getElementById("err-msg").style.display = "none";
  	},
  	destroyed(){
  		this.closeModalCourses();
  	},
   	computed: {
          allCoursesInfo() {
            return this.$store.getters.allCoursesInfo;
          },
          learningTypes() {
	    return this.$store.getters.learningTypes;
	  },
	  learningForms() {
            return this.$store.getters.learningForms;
          }

        }

}
</script>

<style lang="less">
	@import '../assets/styles/index.less';
	.blackout{
		background-color: rgba(0, 0, 0, 0.5);
		  position: fixed;
		  top: 0;
		  left: 0;
		  width: 100%;
		  height: 100%;
		  overflow: auto;		 
		  padding: 0 20px;
		  z-index: 1050;		
	}
	.modal-courses{
		//z-index: 1051;
		position: relative;
		margin: 70px auto;		
		padding: 0.1px;
		width: 80%;
		//height: 1700px;
		background-color: @lightBackground;
	}	
	.custom_select{
		position: relative;
		display: block;
		padding: 5px 10px;
		width: 180px;
		text-align: left;
		border-radius: 4px;
		font-family: Muller;
		font-size: 14px;		
		color:@darkText;
		margin-top: 20px;
		margin-bottom: 20px;
	}
	.modal{
		&__img{
			background: url("../assets/images/course_img.jpg");
			height: 50px;
			width: 50px;
			float: left;
			margin: 11px;
			margin-left: 90px;		}
	}

	ul{
		width: 90%;
		margin-left: auto;
		margin-right: auto;
		padding: 0;
	}
	li{
		list-style-type: none;
		background-color: @darkerBackground;
		border-radius: 4px;
		padding: 10px;
		margin:10px; 
	}
	.close-btn{
		position: absolute;
		top:30px;
		right: 30px;
		width: 20px;
		height: 20px;
		background: url("../assets/images/cross.png");
		cursor: pointer;
	}
	.lock{		
		overflow: hidden;
	}
	.modal-main-btn{
		width: 40%;
		display: block;
		margin: 30px auto 20px auto;
	}
	.modal-cancel-btn{
		margin: 20px auto 50px auto;
	}

	/* The container */
	.checkbox-container {
	  display: block;
	  position: relative;
	  display: inline-block;

		float: left;

	  
	  margin: 0px auto;
	  cursor: pointer;
	  font-size: 22px;
	  width: 70%;
	  
	  -webkit-user-select: none;
	  -moz-user-select: none;
	  -ms-user-select: none;
	  user-select: none;
	}

	/* Hide the browser's default checkbox */
	.checkbox-container input {
	  position: absolute;
	  opacity: 0;
	  cursor: pointer;
	  height: 0;
	  width: 0;
	}

	/* Create a custom checkbox */
	.checkmark {
	  position: absolute;
	  top: 50%;
	  left: 20px;
	  transform: translateY(-50%);
	  height: 35px;
	  width: 35px;
	  background-color: @lightBackground;
	  border: 1px solid @border;

	  border-radius: 2px;
	}

	/* On mouse-over, add a grey background color */
	.checkbox-container:hover input ~ .checkmark {
	  background-color: @darkerBackground;
	}

	/* When the checkbox is checked, add a blue background 
	.course-container input:checked ~ .checkmark {
	  background-color: @lightBackground;
	   border: 1px solid @border;
	   border-radius: 2px;
	}*/

	/* Create the checkmark/indicator (hidden when not checked) */
	.checkmark:after {
	  content: "";
	  position: absolute;
	  display: none;
	}

	/* Show the checkmark when checked */
	.checkbox-container input:checked ~ .checkmark:after {
	  display: block;
	}

	/* Style the checkmark/indicator */
	.checkbox-container .checkmark:after {
	  left: 10px;
	  top:0px;
	  width: 12px;
	  height: 28px;
	  border: solid @mainOrange;
	  border-width: 0 4px 4px 0;
	  -webkit-transform: rotate(45deg);
	  -ms-transform: rotate(45deg);
	  transform: rotate(45deg);
	}
	.modal-details-btn{
		width:150px;
		float: right;
		margin-right: 20px;
		margin-top: 20px;
	}
	.course-container{
		width: 100%;
		background-color: @darkerBackground;
	    border: 1px solid @border;
	    border-radius: 4px;
	    margin-top: 20px;
	}
	.modal-form{
		width: 80%;
		margin-right: auto;
		margin-left: auto;
	}
	@media (max-width: 913px) {	    
		.modal{
			&__img{				
				margin-left: 70px;		
			}
		}	
		.checkbox-container {
		  
		  width: 60%;
		  
		  
		}
	}
	@media (max-width:700px) {	    
		.modal-courses{	
			width: 100%;		
		}
		.modal-details-btn{
			width:130px;
		}
	}
	
</style>

